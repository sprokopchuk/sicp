#lang racket

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
(if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))

; а) Сколько раз вызывается процедура p при вычислении (sine 12.15)?
;    Процедура p при вычислении (sine 12.15) будет вызываться 5 раз.
; б) Каковы порядки роста в терминах количества шагов и используемой памяти (как функция a)
;    для процесса, порождаемого процедурои sine при вычислении (sine a)?
;   Каждый раз при вычислении процедуры (sine a) необходимо угол разделить на три.
;   Для получения угла при котором необходимо вычислить процедуру необходимо a/(3^m)
;   который будет по модулю меньше  0.1.
;   a/(3^m) < 0.1.
;   3^m < a / 0.1
;  m * log3(3) < log3 (a/0.1). Логарифм будет с основанием 3.
;  m < log(a/0.1)
;  Итого имеем, что порядок роста памяти и количество шагов будет расти
; пропорционально log(a/0.1) - O(log3(a/0.1))
